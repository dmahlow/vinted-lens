(()=>{"use strict";new class{constructor(){this.state={isEnabled:!0,isAnalyzing:!1,preferences:[],currentSearch:null},this.lastAnalysisTime=0,this.ANALYSIS_COOLDOWN=2e3,this.initialize()}async initialize(){const e=await browser.storage.local.get(["preferences","currentSearch"]);this.state.preferences=e.preferences||[],this.state.currentSearch=e.currentSearch||null,browser.runtime.onMessage.addListener(this.handleMessage.bind(this)),browser.storage.onChanged.addListener(this.handleStorageChange.bind(this))}async handleMessage(e,t){"ANALYZE_GRID"===e.type&&await this.handleAnalyzeGrid(e.payload,t.tab?.id)}async handleAnalyzeGrid(e,t){if(!t||this.state.isAnalyzing)return;const r=Date.now(),a=r-this.lastAnalysisTime;if(a<this.ANALYSIS_COOLDOWN)console.log(`Skipping analysis - cooldown period (${Math.round(a)}ms elapsed)`);else{this.state.isAnalyzing=!0,this.lastAnalysisTime=r;try{const{viewport:r}=e,a=(await browser.storage.local.get("apiKey")).apiKey;if(!a)throw new Error("API key not configured");const s=await async function(e,t,r,a){const s=[{role:"user",content:[{type:"text",text:`Analyze these product images from Vinted.com.\nUser preferences: ${r.join(", ")}\n${a?`Search terms: ${a}`:""}\n\nFor each product, determine if it matches the preferences${a?" and search terms":""}.\nRespond with a JSON array where each item has:\n{\n  "id": "item-[index]",\n  "matches": boolean,\n  "confidence": number (0-1),\n  "matchedCriteria": string[]\n}`},...t.map((e=>({type:"image",source:{type:"base64",media_type:"image/jpeg",data:e.split(",")[1]}})))]}];try{const t=await fetch("https://api.anthropic.com/v1/messages",{method:"POST",headers:{"Content-Type":"application/json","anthropic-api-key":e,"anthropic-version":"2023-06-01"},body:JSON.stringify({model:"claude-3-opus-20240229",max_tokens:1024,messages:s})});if(!t.ok){const e=await t.json().catch((()=>null));throw new Error(e?.error?.message||`Anthropic API error (${t.status}): ${t.statusText}`)}const r=await t.json();if(!r.content||!Array.isArray(r.content))throw new Error("Invalid response format from Claude API");const a=r.content[r.content.length-1];if(!a.text)throw new Error("No text content in Claude response");let n;try{if(n=JSON.parse(a.text),!Array.isArray(n)||!n.every((e=>"string"==typeof e.id&&"boolean"==typeof e.matches&&"number"==typeof e.confidence&&Array.isArray(e.matchedCriteria))))throw new Error("Invalid grid analysis format")}catch(e){throw new Error("Failed to parse Claude response as grid analysis")}return JSON.stringify(n)}catch(e){if(e instanceof Error)throw e;throw new Error("Failed to communicate with Claude API")}}(a,[r.screenshot],this.state.preferences,this.state.currentSearch);let n;try{if(n=JSON.parse(s),!Array.isArray(n)||!n.every((e=>"object"==typeof e.position&&"number"==typeof e.position.row&&"number"==typeof e.position.column&&"boolean"==typeof e.matches&&"number"==typeof e.confidence&&Array.isArray(e.matchedCriteria))))throw new Error("Invalid analysis format")}catch(e){throw new Error("Failed to parse analysis result")}const i={items:n,timestamp:(new Date).toISOString()};await browser.tabs.sendMessage(t,{type:"ANALYSIS_COMPLETE",payload:{analysis:i}})}catch(e){console.error("Analysis failed:",e),await browser.tabs.sendMessage(t,{type:"SHOW_TOAST",payload:{message:e instanceof Error?e.message:"Analysis failed",type:"error"}})}finally{this.state.isAnalyzing=!1}}}handleStorageChange(e,t){"local"===t&&(e.preferences&&(this.state.preferences=e.preferences.newValue||[]),e.currentSearch&&(this.state.currentSearch=e.currentSearch.newValue||null))}}})();
//# sourceMappingURL=background.js.map