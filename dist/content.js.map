{"version":3,"file":"content.js","mappings":"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","sources":["webpack://vinted-lens/./src/content/index.ts"],"sourcesContent":["import {\n  Message,\n  Selectors,\n  ProductItem,\n  ExtensionState,\n  ProductAnalysis,\n  AnalysisCompletePayload,\n  UpdatePreferencesPayload,\n  UpdateSearchPayload,\n  ShowToastPayload,\n  StartScanPayload,\n  StopScanPayload,\n  ScanProgress,\n  ScanProgressPayload,\n  AnalysisStatusPayload,\n  AnalysisStage,\n  StorageKeys\n} from '../types';\n\nclass VintedLensContent {\n  private state: ExtensionState = {\n    isEnabled: true,\n    isScanning: false,\n    preferences: [],\n    currentSearch: null,\n    scanProgress: null,\n    endlessScroll: false\n  };\n\n  private scanQueue: ProductItem[] = [];\n  private activeProducts = new Set<string>();\n  private readonly MAX_CONCURRENT = 8;\n  private observer: IntersectionObserver | null = null;\n  private mutationObserver: MutationObserver | null = null;\n  private observedProducts = new Set<string>();\n\n  constructor() {\n    this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    console.log('🔍 Vinted Lens: Initializing content script');\n\n    // Load initial state from storage\n    const storage = await browser.storage.local.get([\n      StorageKeys.Preferences,\n      StorageKeys.CurrentSearch,\n      StorageKeys.EndlessScroll\n    ]);\n    this.state.preferences = storage[StorageKeys.Preferences] || [];\n    this.state.currentSearch = storage[StorageKeys.CurrentSearch] || null;\n    this.state.endlessScroll = storage[StorageKeys.EndlessScroll] || false;\n    console.log('📋 Loaded preferences:', this.state.preferences);\n    console.log('🔎 Current search:', this.state.currentSearch);\n    console.log('♾️ Endless scroll:', this.state.endlessScroll);\n\n    // Set up message listeners\n    browser.runtime.onMessage.addListener(this.handleMessage.bind(this));\n    console.log('👂 Message listener set up');\n\n    // Set up observers if endless scroll is enabled\n    if (this.state.endlessScroll) {\n      console.log('♾️ Setting up endless scroll mode');\n      this.state.isScanning = true;\n\n      // Clear any stale analysis classes\n      console.log('🧹 Clearing stale analysis classes');\n      document.querySelectorAll('.vinted-lens-analyzed').forEach(element => {\n        element.classList.remove(\n          'vinted-lens-match',\n          'vinted-lens-hidden',\n          'vinted-lens-low-confidence',\n          'vinted-lens-analyzed'\n        );\n        element.removeAttribute('data-vinted-lens-id');\n      });\n\n      this.setupIntersectionObserver();\n      this.setupMutationObserver();\n    }\n  }\n\n  private handleMessage(message: Message): void {\n    switch (message.type) {\n      case 'START_SCAN':\n        this.handleStartScan(message.payload as StartScanPayload);\n        break;\n      case 'STOP_SCAN':\n        this.handleStopScan(message.payload as StopScanPayload);\n        break;\n      case 'ANALYSIS_COMPLETE':\n        this.handleAnalysisComplete(message.payload as AnalysisCompletePayload);\n        break;\n      case 'ANALYSIS_STATUS':\n        this.handleAnalysisStatus(message.payload as AnalysisStatusPayload);\n        break;\n      case 'UPDATE_PREFERENCES':\n        this.handlePreferencesUpdate(message.payload as UpdatePreferencesPayload);\n        break;\n      case 'UPDATE_SEARCH':\n        this.handleSearchUpdate(message.payload as UpdateSearchPayload);\n        break;\n      case 'SHOW_TOAST':\n        this.showToast(message.payload as ShowToastPayload);\n        break;\n    }\n  }\n\n  private handleAnalysisStatus(payload: AnalysisStatusPayload): void {\n    const { stage, productId, data } = payload;\n\n    switch (stage) {\n      case 'start':\n        console.log(`🤖 Analyzing product ${productId}:`, {\n          prompt: data?.prompt\n        });\n        break;\n\n      case 'complete':\n        console.log(`✅ Claude response for ${productId}:`, {\n          response: data?.response,\n          timing: data?.timing\n        });\n        break;\n\n      case 'error':\n        console.error(`❌ Analysis failed for ${productId}:`, {\n          error: data?.error\n        });\n        break;\n    }\n  }\n\n  private setupIntersectionObserver(): void {\n    console.log('🔍 Setting up intersection observer');\n    this.observer = new IntersectionObserver(entries => {\n      console.log('🔍 Intersection observer triggered:', {\n        entries: entries.length,\n        intersecting: entries.filter(e => e.isIntersecting).length\n      });\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const element = entry.target as HTMLElement;\n          console.log('🔍 Element intersecting:', {\n            id: element.id,\n            hasId: !!element.id,\n            classes: element.classList.toString()\n          });\n          const productId = element.getAttribute('data-vinted-lens-id');\n          console.log('🔍 Checking product:', {\n            productId,\n            isObserved: productId ? this.observedProducts.has(productId) : false,\n            classes: element.classList.toString()\n          });\n          if (!productId || !this.observedProducts.has(productId)) {\n            this.queueProductForAnalysis(element);\n          }\n        }\n      });\n    }, {\n      rootMargin: '50px', // Start loading slightly before elements come into view\n      threshold: 0.1 // Trigger when even a small part is visible\n    });\n\n    // Start observing existing products\n    document.querySelectorAll(Selectors.ProductItem).forEach(element => {\n      if (!element.classList.contains('vinted-lens-analyzed')) {\n        this.observer!.observe(element);\n      }\n    });\n  }\n\n  private setupMutationObserver(): void {\n    console.log('🔍 Setting up mutation observer');\n    this.mutationObserver = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        mutation.addedNodes.forEach(node => {\n          if (node instanceof HTMLElement && node.matches(Selectors.ProductItem)) {\n            if (!node.classList.contains('vinted-lens-analyzed')) {\n              this.observer?.observe(node);\n            }\n          }\n        });\n      });\n    });\n\n    const productGrid = document.querySelector(Selectors.ProductGrid);\n    if (productGrid) {\n      this.mutationObserver.observe(productGrid, {\n        childList: true,\n        subtree: true\n      });\n    }\n  }\n\n  private queueProductForAnalysis(element: HTMLElement): void {\n    const productId = element.getAttribute('data-vinted-lens-id');\n    console.log('🔄 Queueing product:', {\n      productId,\n      isScanning: this.state.isScanning,\n      queueLength: this.scanQueue.length,\n      activeProducts: this.activeProducts.size\n    });\n\n    const imgElement = element.querySelector(Selectors.ProductImage) as HTMLImageElement;\n    const titleElement = element.querySelector(Selectors.ProductTitle);\n    const descElement = element.querySelector(Selectors.ProductDescription);\n\n    if (!imgElement || !titleElement || !descElement) {\n      console.log('⚠️ Missing required elements:', {\n        hasImage: !!imgElement,\n        hasTitle: !!titleElement,\n        hasDescription: !!descElement\n      });\n      return;\n    }\n\n    if (imgElement && titleElement && descElement) {\n      const product: ProductItem = {\n        id: `item-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        element,\n        imageUrl: imgElement.src,\n        title: titleElement.textContent || '',\n        description: descElement.getAttribute('title') || ''\n      };\n\n      element.setAttribute('data-vinted-lens-id', product.id);\n      this.observedProducts.add(product.id);\n      this.scanQueue.push(product);\n\n      // Start processing if we have capacity\n      if (this.activeProducts.size < this.MAX_CONCURRENT) {\n        this.processNextProduct();\n      }\n    }\n  }\n\n  private handleStartScan(payload: StartScanPayload): void {\n    if (this.state.isScanning) {\n      console.log('⏳ Scan already in progress');\n      return;\n    }\n\n    // Update preferences and search term\n    this.state.preferences = payload.preferences;\n    this.state.currentSearch = payload.searchTerm;\n\n    // Get all unanalyzed products\n    this.scanQueue = this.getUnanalyzedProducts();\n\n    if (this.scanQueue.length === 0) {\n      this.showToast({\n        message: 'No items to analyze',\n        type: 'info'\n      });\n      return;\n    }\n\n    // Start scanning\n    this.state.isScanning = true;\n    this.state.scanProgress = {\n      total: this.scanQueue.length,\n      current: 0,\n      currentItem: null,\n      startTime: Date.now()\n    };\n\n    this.updateProgress();\n\n    // Set up observers for endless scroll if enabled\n    if (this.state.endlessScroll && !this.observer) {\n      this.setupIntersectionObserver();\n      this.setupMutationObserver();\n    }\n\n    this.processNextProduct();\n  }\n\n  private handleStopScan(payload: StopScanPayload): void {\n    if (!this.state.isScanning) return;\n\n    console.log('🛑 Stopping scan:', {\n      reason: payload.reason,\n      endlessScroll: this.state.endlessScroll\n    });\n\n    this.scanQueue = [];\n    this.activeProducts.clear();\n\n    // Only set scanning false if not in endless scroll mode\n    if (!this.state.endlessScroll) {\n      this.state.isScanning = false;\n      this.state.scanProgress = null;\n    }\n\n    // Clean up observers if not in endless scroll mode\n    if (!this.state.endlessScroll) {\n      if (this.observer) {\n        this.observer.disconnect();\n        this.observer = null;\n      }\n      if (this.mutationObserver) {\n        this.mutationObserver.disconnect();\n        this.mutationObserver = null;\n      }\n      this.observedProducts.clear();\n    }\n\n    this.showToast({\n      message: payload.reason === 'complete'\n        ? 'Scan complete'\n        : 'Scan stopped',\n      type: payload.reason === 'error' ? 'error' : 'info'\n    });\n\n    this.updateProgress();\n  }\n\n  private getUnanalyzedProducts(): ProductItem[] {\n    const items: ProductItem[] = [];\n    const productElements = document.querySelectorAll(\n      `${Selectors.ProductItem}:not(.vinted-lens-analyzed)`\n    );\n\n    productElements.forEach((element, index) => {\n      const imgElement = element.querySelector(Selectors.ProductImage) as HTMLImageElement;\n      const titleElement = element.querySelector(Selectors.ProductTitle);\n      const descElement = element.querySelector(Selectors.ProductDescription);\n\n      if (imgElement && titleElement && descElement) {\n        items.push({\n          id: `item-${Date.now()}-${index}`,\n          element: element as HTMLElement,\n          imageUrl: imgElement.src,\n          title: titleElement.textContent || '',\n          description: descElement.getAttribute('title') || ''\n        });\n      }\n    });\n\n    return items;\n  }\n\n  private async processNextProduct(): Promise<void> {\n    if (!this.state.isScanning) return;\n\n    // Process up to MAX_CONCURRENT products at once\n    while (this.scanQueue.length > 0 && this.activeProducts.size < this.MAX_CONCURRENT) {\n      const product = this.scanQueue.shift()!;\n      console.log('🔄 Processing product:', product.id, {\n        activeProducts: this.activeProducts.size,\n        queueLength: this.scanQueue.length\n      });\n\n      // Update progress\n      if (this.state.scanProgress) {\n        this.state.scanProgress.current++;\n        this.state.scanProgress.currentItem = product.title;\n        this.updateProgress();\n      }\n\n      // Add analyzing class\n      product.element.setAttribute('data-vinted-lens-id', product.id);\n      product.element.classList.add('vinted-lens-analyzing');\n\n      // Track active product\n      this.activeProducts.add(product.id);\n\n      // Start analysis (don't await)\n      this.analyzeProduct(product).catch(error => {\n        console.error('❌ Analysis failed:', error);\n        this.activeProducts.delete(product.id);\n        product.element.classList.remove('vinted-lens-analyzing');\n        // Try next product immediately\n        this.processNextProduct();\n      });\n    }\n\n    // If queue is empty and no active products, we're done\n    if (this.scanQueue.length === 0 && this.activeProducts.size === 0) {\n      this.handleStopScan({ reason: 'complete' });\n    }\n  }\n\n  private async analyzeProduct(product: ProductItem): Promise<void> {\n    console.log('📤 Sending product for analysis:', {\n      id: product.id,\n      imageUrl: product.imageUrl,\n      title: product.title,\n      queueLength: this.scanQueue.length,\n      activeProducts: this.activeProducts.size\n    });\n\n    await browser.runtime.sendMessage({\n      type: 'ANALYZE_PRODUCT',\n      payload: {\n        product: {\n          ...product,\n          element: undefined // Can't send DOM elements\n        },\n        preferences: this.state.preferences,\n        searchTerm: this.state.currentSearch\n      }\n    });\n  }\n\n  private handleAnalysisComplete(payload: AnalysisCompletePayload): void {\n    const { productId, analysis } = payload;\n    console.log('📥 Analysis complete:', {\n      productId,\n      matches: analysis.matches,\n      confidence: analysis.confidence,\n      timing: analysis.timing,\n      queueSize: this.scanQueue.length\n    });\n\n    // Find the product element\n    const productElement = document.querySelector(\n      `${Selectors.ProductItem}[data-vinted-lens-id=\"${productId}\"]`\n    ) as HTMLElement;\n\n    if (!productElement) {\n      console.warn('⚠️ No element found for product:', productId);\n      this.activeProducts.delete(productId);\n      this.processNextProduct();\n      return;\n    }\n\n    // Remove analyzing state\n    productElement.classList.remove('vinted-lens-analyzing');\n    productElement.classList.add('vinted-lens-analyzed');\n\n    // Apply transition class first\n    productElement.classList.add('vinted-lens-transition');\n\n    // Use setTimeout to ensure transition is applied\n    setTimeout(() => {\n      if (analysis.matches) {\n        productElement.classList.add('vinted-lens-match');\n        if (analysis.confidence < 0.8) {\n          productElement.classList.add('vinted-lens-low-confidence');\n        }\n      } else {\n        productElement.classList.add('vinted-lens-hidden');\n      }\n\n      // Remove from active products and process next\n      this.activeProducts.delete(productId);\n      this.processNextProduct();\n    }, 0);\n  }\n\n  private updateProgress(): void {\n    if (!this.state.scanProgress) return;\n\n    // Send progress update\n    browser.runtime.sendMessage({\n      type: 'SCAN_PROGRESS',\n      payload: {\n        progress: this.state.scanProgress\n      } as ScanProgressPayload\n    });\n  }\n\n  private handlePreferencesUpdate(payload: UpdatePreferencesPayload): void {\n    this.state.preferences = payload.preferences;\n    this.resetAnalysis();\n  }\n\n  private handleSearchUpdate(payload: UpdateSearchPayload): void {\n    this.state.currentSearch = payload.search;\n    this.resetAnalysis();\n  }\n\n  private resetAnalysis(): void {\n    // Stop any ongoing scan\n    if (this.state.isScanning) {\n      this.handleStopScan({ reason: 'user' });\n    }\n\n    // Clear analysis classes\n    document.querySelectorAll('.vinted-lens-match, .vinted-lens-hidden, .vinted-lens-low-confidence, .vinted-lens-analyzed')\n      .forEach(element => {\n        element.classList.remove(\n          'vinted-lens-match',\n          'vinted-lens-hidden',\n          'vinted-lens-low-confidence',\n          'vinted-lens-analyzed'\n        );\n        element.removeAttribute('data-vinted-lens-id');\n      });\n  }\n\n  private showToast(options: ShowToastPayload): void {\n    const toast = document.createElement('div');\n    toast.className = `vinted-lens-toast ${options.type || ''}`;\n    toast.textContent = options.message;\n    document.body.appendChild(toast);\n\n    // Force reflow to trigger animation\n    toast.offsetHeight;\n    toast.classList.add('show');\n\n    setTimeout(() => {\n      toast.classList.remove('show');\n      setTimeout(() => toast.remove(), 300);\n    }, options.duration || 3000);\n  }\n}\n\n// Initialize content script\nnew VintedLensContent();\n"],"names":["constructor","state","isEnabled","isScanning","preferences","currentSearch","scanProgress","endlessScroll","scanQueue","activeProducts","Set","MAX_CONCURRENT","observer","mutationObserver","observedProducts","this","initialize","console","log","storage","browser","local","get","runtime","onMessage","addListener","handleMessage","bind","document","querySelectorAll","forEach","element","classList","remove","removeAttribute","setupIntersectionObserver","setupMutationObserver","message","type","handleStartScan","payload","handleStopScan","handleAnalysisComplete","handleAnalysisStatus","handlePreferencesUpdate","handleSearchUpdate","showToast","stage","productId","data","prompt","response","timing","error","IntersectionObserver","entries","length","intersecting","filter","e","isIntersecting","entry","target","id","hasId","classes","toString","getAttribute","isObserved","has","queueProductForAnalysis","rootMargin","threshold","contains","observe","MutationObserver","mutations","mutation","addedNodes","node","HTMLElement","matches","productGrid","querySelector","childList","subtree","queueLength","size","imgElement","titleElement","descElement","product","Date","now","Math","random","substr","imageUrl","src","title","textContent","description","setAttribute","add","push","processNextProduct","hasImage","hasTitle","hasDescription","searchTerm","getUnanalyzedProducts","total","current","currentItem","startTime","updateProgress","reason","clear","disconnect","items","index","shift","analyzeProduct","catch","delete","sendMessage","undefined","analysis","confidence","queueSize","productElement","warn","setTimeout","progress","resetAnalysis","search","options","toast","createElement","className","body","appendChild","offsetHeight","duration"],"sourceRoot":""}