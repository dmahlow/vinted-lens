{"version":3,"file":"options.js","mappings":"mBAGA,MAAMA,EAKJ,WAAAC,GACEC,KAAKC,YAAcC,SAASC,eAAe,UAC3CH,KAAKI,WAAaF,SAASC,eAAe,QAC1CH,KAAKK,cAAgBH,SAASC,eAAe,UAE7CH,KAAKM,YACP,CAEQ,gBAAMA,GAEZ,MAAMC,QCSHC,iBACL,MAAMC,QAAgBC,QAAQD,QAAQE,MAAMC,IAAI,C,yBAKhD,MAAO,CACLC,mBAAoBJ,EAAO,aAA6B,GACxDK,OAAQL,EAAO,QAAwB,GAE3C,CDnBwBM,GACpBf,KAAKC,YAAYe,MAAQT,EAAMO,OAG/Bd,KAAKI,WAAWa,iBAAiB,SAAS,IAAMjB,KAAKkB,eACvD,CAEQ,iBAAMA,GACZ,MAAMJ,EAASd,KAAKC,YAAYe,MAAMG,OAEtC,GAAKL,EAKL,IAWE,GATAM,QAAQC,IAAI,kBAAmBP,GAC/BM,QAAQC,IAAI,sBAAuB,CACjCC,OAAQR,EAAOQ,OACfC,WAAYT,EAAOU,UAAU,EAAG,GAChCC,gBAAiBX,EAAOY,cAAcC,SAAS,UAC/CC,eAAgBd,EAAOK,OAAOG,UAI3BR,EAAOS,WAAW,WAErB,YADAvB,KAAK6B,WAAW,oCAAqC,eAIjDnB,QAAQD,QAAQE,MAAMmB,IAAI,CAC9B,OAAsBhB,IAGxBd,KAAK6B,WAAW,gBAAiB,UACnC,CAAE,MAAOE,GACPX,QAAQW,MAAM,0BAA2BA,GACzC/B,KAAK6B,WAAW,yBAA0B,QAC5C,MA5BE7B,KAAK6B,WAAW,sBAAuB,QA6B3C,CAEQ,UAAAA,CAAWG,EAAiBC,EAA4B,WAC9DjC,KAAKK,cAAc6B,YAAcF,EACjChC,KAAKK,cAAc8B,UAAYF,EAE/BG,YAAW,KACTpC,KAAKK,cAAc6B,YAAc,GACjClC,KAAKK,cAAc8B,UAAY,EAAE,GAChC,IACL,EAIFjC,SAASe,iBAAiB,oBAAoB,KAC5C,IAAInB,CAAmB,G","sources":["webpack://vinted-lens/./src/options/index.ts","webpack://vinted-lens/./src/utils/index.ts"],"sourcesContent":["import { StorageKeys, UserPreferences } from '../types';\nimport { getStoredPreferences } from '../utils';\n\nclass VintedLensOptions {\n  private apiKeyInput: HTMLInputElement;\n  private saveButton: HTMLButtonElement;\n  private statusElement: HTMLElement;\n\n  constructor() {\n    this.apiKeyInput = document.getElementById('apiKey') as HTMLInputElement;\n    this.saveButton = document.getElementById('save') as HTMLButtonElement;\n    this.statusElement = document.getElementById('status') as HTMLElement;\n\n    this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    // Load stored preferences\n    const prefs = await getStoredPreferences();\n    this.apiKeyInput.value = prefs.apiKey;\n\n    // Setup event listeners\n    this.saveButton.addEventListener('click', () => this.saveOptions());\n  }\n\n  private async saveOptions(): Promise<void> {\n    const apiKey = this.apiKeyInput.value.trim();\n\n    if (!apiKey) {\n      this.showStatus('API key is required', 'error');\n      return;\n    }\n\n    try {\n      // Print full API key for debugging\n      console.log('ðŸ”‘ Raw API key:', apiKey);\n      console.log('ðŸ”‘ API key details:', {\n        length: apiKey.length,\n        startsWith: apiKey.substring(0, 7),\n        includes_bearer: apiKey.toLowerCase().includes('bearer'),\n        trimmed_length: apiKey.trim().length\n      });\n\n      // Validate API key format\n      if (!apiKey.startsWith('sk-ant-')) {\n        this.showStatus('API key must start with \"sk-ant-\"', 'error');\n        return;\n      }\n\n      await browser.storage.local.set({\n        [StorageKeys.ApiKey]: apiKey\n      });\n\n      this.showStatus('API key saved', 'success');\n    } catch (error) {\n      console.error('Failed to save options:', error);\n      this.showStatus('Failed to save options', 'error');\n    }\n  }\n\n  private showStatus(message: string, type: 'success' | 'error' = 'success'): void {\n    this.statusElement.textContent = message;\n    this.statusElement.className = type;\n\n    setTimeout(() => {\n      this.statusElement.textContent = '';\n      this.statusElement.className = '';\n    }, 3000);\n  }\n}\n\n// Initialize options page when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  new VintedLensOptions();\n});\n","import { StorageKeys, UserPreferences } from '../types';\n\n/**\n * Debounce function to limit the rate at which a function can fire\n */\nexport function debounce<T extends (...args: any[]) => void>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null;\n\n  return function executedFunction(...args: Parameters<T>) {\n    const later = () => {\n      timeout = null;\n      func(...args);\n    };\n\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    timeout = setTimeout(later, wait);\n  };\n}\n\n/**\n * Get stored preferences from browser storage\n */\nexport async function getStoredPreferences(): Promise<UserPreferences> {\n  const storage = await browser.storage.local.get([\n    StorageKeys.Preferences,\n    StorageKeys.ApiKey\n  ]);\n\n  return {\n    defaultPreferences: storage[StorageKeys.Preferences] || [],\n    apiKey: storage[StorageKeys.ApiKey] || ''\n  };\n}\n\n/**\n * Format a timestamp in milliseconds to a human-readable duration\n */\nexport function formatDuration(ms: number): string {\n  if (ms < 1000) {\n    return `${Math.round(ms)}ms`;\n  }\n\n  const seconds = Math.round(ms / 1000);\n  if (seconds < 60) {\n    return `${seconds}s`;\n  }\n\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${minutes}m ${remainingSeconds}s`;\n}\n\n/**\n * Format a number as a percentage with specified decimal places\n */\nexport function formatPercent(value: number, decimals: number = 1): string {\n  return `${(value * 100).toFixed(decimals)}%`;\n}\n\n/**\n * Convert an image URL to base64\n */\nexport async function imageUrlToBase64(url: string): Promise<{ data: string; mediaType: string }> {\n  const response = await fetch(url);\n  const blob = await response.blob();\n  const mediaType = blob.type || 'image/jpeg'; // Default to JPEG if type is not available\n\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const base64data = reader.result as string;\n      // Remove the data URL prefix (e.g., \"data:image/jpeg;base64,\")\n      const base64Clean = base64data.split(',')[1];\n      resolve({ data: base64Clean, mediaType });\n    };\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n}\n"],"names":["VintedLensOptions","constructor","this","apiKeyInput","document","getElementById","saveButton","statusElement","initialize","prefs","async","storage","browser","local","get","defaultPreferences","apiKey","getStoredPreferences","value","addEventListener","saveOptions","trim","console","log","length","startsWith","substring","includes_bearer","toLowerCase","includes","trimmed_length","showStatus","set","error","message","type","textContent","className","setTimeout"],"sourceRoot":""}