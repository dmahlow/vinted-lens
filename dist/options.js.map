{"version":3,"file":"options.js","mappings":"mBAQA,MAAMA,EASJ,WAAAC,GACEC,KAAKC,YAAcC,SAASC,eAAe,UAC3CH,KAAKI,kBAAoBF,SAASC,eAAe,eACjDH,KAAKK,eAAiBH,SAASC,eAAe,aAC9CH,KAAKM,wBAA0BJ,SAASC,eAAe,sBACvDH,KAAKO,kBAAoBL,SAASC,eAAe,cACjDH,KAAKQ,WAAaN,SAASC,eAAe,QAC1CH,KAAKS,cAAgBP,SAASC,eAAe,UAE7CH,KAAKU,YACP,CAEQ,gBAAMA,GAEZ,MAAMC,QAAgBC,QAAQD,QAAQE,MAAMC,IAAI,C,kEAQhDd,KAAKC,YAAYc,MAAQJ,EAAO,QAAwB,GACxDX,KAAKI,kBAAkBW,MAAQJ,EAAO,aAA6B,OACnEX,KAAKK,eAAeU,MAAQJ,EAAO,WAAyBK,YAAc,GAC1EhB,KAAKM,wBAAwBS,OAASJ,EAAO,aAA6B,IAAIM,KAAK,YAG7EjB,KAAKkB,iBAAiBP,EAAO,cAGnCX,KAAKQ,WAAWW,iBAAiB,SAAS,IAAMnB,KAAKoB,eACvD,CAEQ,sBAAMF,CAAiBG,GAC7B,IAAKA,EAEH,YADArB,KAAKO,kBAAkBe,UAAY,2BAIrC,MACMC,EADY,IAAIC,KAAKH,EAAMI,WACDC,qBAEhC1B,KAAKO,kBAAkBe,UAAY,6CAETD,EAAMM,cAAcC,uDACnBP,EAAMQ,cAAcD,uDACpBP,EAAMS,cAAcC,QAAQ,oCACjCR,2BAGxB,CAEQ,iBAAMH,GACZ,MAAMY,EAAShC,KAAKC,YAAYc,MAAMkB,OAChCC,EAAclC,KAAKI,kBAAkBW,MACrCoB,EAAYC,WAAWpC,KAAKK,eAAeU,OAEjD,GAAKiB,EAKL,IAWE,GATAK,QAAQC,IAAI,kBAAmBN,GAC/BK,QAAQC,IAAI,sBAAuB,CACjCC,OAAQP,EAAOO,OACfC,WAAYR,EAAOS,UAAU,EAAG,GAChCC,gBAAiBV,EAAOW,cAAcC,SAAS,UAC/CC,eAAgBb,EAAOC,OAAOM,UAI3BP,EAAOQ,WAAW,SAAWR,EAAOQ,WAAW,YAElD,YADAxC,KAAK8C,WAAW,8CAA+C,SAKjE,GAAIC,MAAMZ,IAAcA,EAAY,EAElC,YADAnC,KAAK8C,WAAW,uCAAwC,SAK1D,MAAME,EAAqBhD,KAAKM,wBAAwBS,MACrDkC,MAAM,KACNC,KAAIC,GAAKA,EAAElB,SACXmB,QAAOD,GAAKA,UAGTvC,QAAQD,QAAQE,MAAMwC,IAAI,CAC9B,OAAsBrB,EACtB,YAA2BE,EAC3B,UAAyBC,EACzB,YAA2Ba,UAIvBpC,QAAQ0C,QAAQC,SAEtBvD,KAAK8C,WAAW,iBAAkB,UACpC,CAAE,MAAOU,GACPnB,QAAQmB,MAAM,0BAA2BA,GACzCxD,KAAK8C,WAAW,yBAA0B,QAC5C,MA/CE9C,KAAK8C,WAAW,sBAAuB,QAgD3C,CAEQ,UAAAA,CAAWW,EAAiBC,EAA4B,WAC9D1D,KAAKS,cAAckD,YAAcF,EACjCzD,KAAKS,cAAcmD,UAAYF,EAE/BG,YAAW,KACT7D,KAAKS,cAAckD,YAAc,GACjC3D,KAAKS,cAAcmD,UAAY,EAAE,GAChC,IACL,EAIF1D,SAASiB,iBAAiB,oBAAoB,KAC5C,IAAIrB,CAAmB,G","sources":["webpack://vinted-lens/./src/options/index.ts"],"sourcesContent":["import { StorageKeys, UserPreferences, CostTracking } from '../types';\nimport { getStoredPreferences } from '../utils';\n\ninterface ExtendedPreferences extends UserPreferences {\n  imageDetail: 'low' | 'high' | 'auto';\n  costLimit: number;\n}\n\nclass VintedLensOptions {\n  private apiKeyInput: HTMLInputElement;\n  private imageDetailSelect: HTMLSelectElement;\n  private costLimitInput: HTMLInputElement;\n  private defaultPreferencesInput: HTMLInputElement;\n  private usageStatsElement: HTMLElement;\n  private saveButton: HTMLButtonElement;\n  private statusElement: HTMLElement;\n\n  constructor() {\n    this.apiKeyInput = document.getElementById('apiKey') as HTMLInputElement;\n    this.imageDetailSelect = document.getElementById('imageDetail') as HTMLSelectElement;\n    this.costLimitInput = document.getElementById('costLimit') as HTMLInputElement;\n    this.defaultPreferencesInput = document.getElementById('defaultPreferences') as HTMLInputElement;\n    this.usageStatsElement = document.getElementById('usageStats') as HTMLElement;\n    this.saveButton = document.getElementById('save') as HTMLButtonElement;\n    this.statusElement = document.getElementById('status') as HTMLElement;\n\n    this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    // Load stored preferences\n    const storage = await browser.storage.local.get([\n      StorageKeys.ApiKey,\n      StorageKeys.ImageDetail,\n      StorageKeys.CostLimit,\n      StorageKeys.MonthlyUsage,\n      StorageKeys.Preferences\n    ]);\n\n    this.apiKeyInput.value = storage[StorageKeys.ApiKey] || '';\n    this.imageDetailSelect.value = storage[StorageKeys.ImageDetail] || 'auto';\n    this.costLimitInput.value = storage[StorageKeys.CostLimit]?.toString() || '';\n    this.defaultPreferencesInput.value = (storage[StorageKeys.Preferences] || []).join(', ');\n\n    // Update usage stats\n    await this.updateUsageStats(storage[StorageKeys.MonthlyUsage]);\n\n    // Setup event listeners\n    this.saveButton.addEventListener('click', () => this.saveOptions());\n  }\n\n  private async updateUsageStats(usage?: CostTracking): Promise<void> {\n    if (!usage) {\n      this.usageStatsElement.innerHTML = 'No usage data available';\n      return;\n    }\n\n    const lastReset = new Date(usage.lastReset);\n    const formattedDate = lastReset.toLocaleDateString();\n\n    this.usageStatsElement.innerHTML = `\n      <ul>\n        <li>Monthly Tokens: ${usage.monthlyTokens.toLocaleString()}</li>\n        <li>Images Analyzed: ${usage.monthlyImages.toLocaleString()}</li>\n        <li>Estimated Cost: $${usage.estimatedCost.toFixed(2)}</li>\n        <li>Last Reset: ${formattedDate}</li>\n      </ul>\n    `;\n  }\n\n  private async saveOptions(): Promise<void> {\n    const apiKey = this.apiKeyInput.value.trim();\n    const imageDetail = this.imageDetailSelect.value as 'low' | 'high' | 'auto';\n    const costLimit = parseFloat(this.costLimitInput.value);\n\n    if (!apiKey) {\n      this.showStatus('API key is required', 'error');\n      return;\n    }\n\n    try {\n      // Print full API key for debugging\n      console.log('ðŸ”‘ Raw API key:', apiKey);\n      console.log('ðŸ”‘ API key details:', {\n        length: apiKey.length,\n        startsWith: apiKey.substring(0, 7),\n        includes_bearer: apiKey.toLowerCase().includes('bearer'),\n        trimmed_length: apiKey.trim().length\n      });\n\n      // Validate API key format\n      if (!apiKey.startsWith('sk-') && !apiKey.startsWith('sk-proj-')) {\n        this.showStatus('API key must start with \"sk-\" or \"sk-proj-\"', 'error');\n        return;\n      }\n\n      // Validate cost limit\n      if (isNaN(costLimit) || costLimit < 0) {\n        this.showStatus('Cost limit must be a positive number', 'error');\n        return;\n      }\n\n      // Parse default preferences\n      const defaultPreferences = this.defaultPreferencesInput.value\n        .split(',')\n        .map(p => p.trim())\n        .filter(p => p);\n\n      // Save settings first\n      await browser.storage.local.set({\n        [StorageKeys.ApiKey]: apiKey,\n        [StorageKeys.ImageDetail]: imageDetail,\n        [StorageKeys.CostLimit]: costLimit,\n        [StorageKeys.Preferences]: defaultPreferences\n      });\n\n      // Then reload background script to apply changes\n      await browser.runtime.reload();\n\n      this.showStatus('Settings saved', 'success');\n    } catch (error) {\n      console.error('Failed to save options:', error);\n      this.showStatus('Failed to save options', 'error');\n    }\n  }\n\n  private showStatus(message: string, type: 'success' | 'error' = 'success'): void {\n    this.statusElement.textContent = message;\n    this.statusElement.className = type;\n\n    setTimeout(() => {\n      this.statusElement.textContent = '';\n      this.statusElement.className = '';\n    }, 3000);\n  }\n}\n\n// Initialize options page when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  new VintedLensOptions();\n});\n"],"names":["VintedLensOptions","constructor","this","apiKeyInput","document","getElementById","imageDetailSelect","costLimitInput","defaultPreferencesInput","usageStatsElement","saveButton","statusElement","initialize","storage","browser","local","get","value","toString","join","updateUsageStats","addEventListener","saveOptions","usage","innerHTML","formattedDate","Date","lastReset","toLocaleDateString","monthlyTokens","toLocaleString","monthlyImages","estimatedCost","toFixed","apiKey","trim","imageDetail","costLimit","parseFloat","console","log","length","startsWith","substring","includes_bearer","toLowerCase","includes","trimmed_length","showStatus","isNaN","defaultPreferences","split","map","p","filter","set","runtime","reload","error","message","type","textContent","className","setTimeout"],"sourceRoot":""}