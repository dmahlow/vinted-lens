{"version":3,"file":"options.js","mappings":"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","sources":["webpack://vinted-lens/./src/options/index.ts"],"sourcesContent":["import { StorageKeys, UserPreferences, CostTracking } from '../types';\nimport { getStoredPreferences } from '../utils';\n\ninterface ExtendedPreferences extends UserPreferences {\n  imageDetail: 'low' | 'high' | 'auto';\n  costLimit: number;\n}\n\nclass VintedLensOptions {\n  private apiKeyInput: HTMLInputElement;\n  private imageDetailSelect: HTMLSelectElement;\n  private costLimitInput: HTMLInputElement;\n  private defaultPreferencesInput: HTMLInputElement;\n  private endlessScrollInput: HTMLInputElement;\n  private usageStatsElement: HTMLElement;\n  private saveButton: HTMLButtonElement;\n  private resetCostButton: HTMLButtonElement;\n  private statusElement: HTMLElement;\n\n  constructor() {\n    this.apiKeyInput = document.getElementById('apiKey') as HTMLInputElement;\n    this.imageDetailSelect = document.getElementById('imageDetail') as HTMLSelectElement;\n    this.costLimitInput = document.getElementById('costLimit') as HTMLInputElement;\n    this.defaultPreferencesInput = document.getElementById('defaultPreferences') as HTMLInputElement;\n    this.endlessScrollInput = document.getElementById('endlessScroll') as HTMLInputElement;\n    this.usageStatsElement = document.getElementById('usageStats') as HTMLElement;\n    this.saveButton = document.getElementById('save') as HTMLButtonElement;\n    this.resetCostButton = document.getElementById('resetCost') as HTMLButtonElement;\n    this.statusElement = document.getElementById('status') as HTMLElement;\n\n    this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    // Load stored preferences\n    const storage = await browser.storage.local.get([\n      StorageKeys.ApiKey,\n      StorageKeys.ImageDetail,\n      StorageKeys.CostLimit,\n      StorageKeys.MonthlyUsage,\n      StorageKeys.Preferences,\n      StorageKeys.EndlessScroll\n    ]);\n\n    this.apiKeyInput.value = storage[StorageKeys.ApiKey] || '';\n    this.imageDetailSelect.value = storage[StorageKeys.ImageDetail] || 'auto';\n    this.costLimitInput.value = storage[StorageKeys.CostLimit]?.toString() || '';\n    this.defaultPreferencesInput.value = (storage[StorageKeys.Preferences] || []).join(', ');\n    this.endlessScrollInput.checked = storage[StorageKeys.EndlessScroll] || false;\n\n    // Update usage stats\n    await this.updateUsageStats(storage[StorageKeys.MonthlyUsage]);\n\n    // Setup event listeners\n    this.saveButton.addEventListener('click', () => this.saveOptions());\n    this.resetCostButton.addEventListener('click', () => this.resetCostTracking());\n  }\n\n  private async updateUsageStats(usage?: CostTracking): Promise<void> {\n    if (!usage) {\n      this.usageStatsElement.innerHTML = 'No usage data available';\n      return;\n    }\n\n    const lastReset = new Date(usage.lastReset);\n    const formattedDate = lastReset.toLocaleDateString();\n\n    this.usageStatsElement.innerHTML = `\n      <ul>\n        <li>Monthly Input Tokens: ${usage.monthlyInputTokens?.toLocaleString() || '0'}</li>\n        <li>Monthly Output Tokens: ${usage.monthlyOutputTokens?.toLocaleString() || '0'}</li>\n        <li>Total Tokens: ${usage.monthlyTokens.toLocaleString()}</li>\n        <li>Images Analyzed: ${usage.monthlyImages.toLocaleString()}</li>\n        <li>Estimated Cost: $${usage.estimatedCost.toFixed(2)}</li>\n        <li>Last Reset: ${formattedDate}</li>\n      </ul>\n    `;\n  }\n\n  private async saveOptions(): Promise<void> {\n    const apiKey = this.apiKeyInput.value.trim();\n    const imageDetail = this.imageDetailSelect.value as 'low' | 'high' | 'auto';\n    const costLimit = parseFloat(this.costLimitInput.value);\n\n    if (!apiKey) {\n      this.showStatus('API key is required', 'error');\n      return;\n    }\n\n    try {\n      // Print full API key for debugging\n      console.log('ðŸ”‘ Raw API key:', apiKey);\n      console.log('ðŸ”‘ API key details:', {\n        length: apiKey.length,\n        startsWith: apiKey.substring(0, 7),\n        includes_bearer: apiKey.toLowerCase().includes('bearer'),\n        trimmed_length: apiKey.trim().length\n      });\n\n      // Validate API key format\n      if (!apiKey.startsWith('sk-') && !apiKey.startsWith('sk-proj-')) {\n        this.showStatus('API key must start with \"sk-\" or \"sk-proj-\"', 'error');\n        return;\n      }\n\n      // Validate cost limit\n      if (isNaN(costLimit) || costLimit < 0) {\n        this.showStatus('Cost limit must be a positive number', 'error');\n        return;\n      }\n\n      // Parse default preferences\n      const defaultPreferences = this.defaultPreferencesInput.value\n        .split(',')\n        .map(p => p.trim())\n        .filter(p => p);\n\n      // Save settings first\n      await browser.storage.local.set({\n        [StorageKeys.ApiKey]: apiKey,\n        [StorageKeys.ImageDetail]: imageDetail,\n        [StorageKeys.CostLimit]: costLimit,\n        [StorageKeys.Preferences]: defaultPreferences,\n        [StorageKeys.EndlessScroll]: this.endlessScrollInput.checked\n      });\n\n      // Then reload background script to apply changes\n      await browser.runtime.reload();\n\n      this.showStatus('Settings saved', 'success');\n    } catch (error) {\n      console.error('Failed to save options:', error);\n      this.showStatus('Failed to save options', 'error');\n    }\n  }\n\n  private async resetCostTracking(): Promise<void> {\n    try {\n      const now = new Date();\n      const newUsage: CostTracking = {\n        monthlyInputTokens: 0,\n        monthlyOutputTokens: 0,\n        monthlyTokens: 0,\n        monthlyImages: 0,\n        estimatedCost: 0,\n        lastReset: now.toISOString()\n      };\n\n      await browser.storage.local.set({\n        [StorageKeys.MonthlyUsage]: newUsage\n      });\n\n      // Update display\n      await this.updateUsageStats(newUsage);\n\n      // Reload background script to apply changes\n      await browser.runtime.reload();\n\n      this.showStatus('Usage stats reset', 'success');\n    } catch (error) {\n      console.error('Failed to reset usage stats:', error);\n      this.showStatus('Failed to reset usage stats', 'error');\n    }\n  }\n\n  private showStatus(message: string, type: 'success' | 'error' = 'success'): void {\n    this.statusElement.textContent = message;\n    this.statusElement.className = type;\n\n    setTimeout(() => {\n      this.statusElement.textContent = '';\n      this.statusElement.className = '';\n    }, 3000);\n  }\n}\n\n// Initialize options page when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  new VintedLensOptions();\n});\n"],"names":["VintedLensOptions","constructor","this","apiKeyInput","document","getElementById","imageDetailSelect","costLimitInput","defaultPreferencesInput","endlessScrollInput","usageStatsElement","saveButton","resetCostButton","statusElement","initialize","storage","browser","local","get","value","toString","join","checked","updateUsageStats","addEventListener","saveOptions","resetCostTracking","usage","innerHTML","formattedDate","Date","lastReset","toLocaleDateString","monthlyInputTokens","toLocaleString","monthlyOutputTokens","monthlyTokens","monthlyImages","estimatedCost","toFixed","apiKey","trim","imageDetail","costLimit","parseFloat","console","log","length","startsWith","substring","includes_bearer","toLowerCase","includes","trimmed_length","showStatus","isNaN","defaultPreferences","split","map","p","filter","set","runtime","reload","error","newUsage","toISOString","message","type","textContent","className","setTimeout"],"sourceRoot":""}