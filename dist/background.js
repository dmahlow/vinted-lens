(()=>{"use strict";new class{constructor(){this.apiKey=null,this.initialize()}async initialize(){console.log("🔍 Vinted Lens: Initializing background script");const e=await browser.storage.local.get("apiKey");this.apiKey=e.apiKey||null,console.log("🔑 Raw API key from storage:",this.apiKey),console.log("🔑 API key details:",{present:!!this.apiKey,value:this.apiKey,keyType:this.apiKey?typeof this.apiKey:"null",startsWith:this.apiKey?this.apiKey.substring(0,7):"n/a",length:this.apiKey?this.apiKey.length:0,storage_key_used:"apiKey"}),browser.runtime.onMessage.addListener(this.handleMessage.bind(this)),console.log("👂 Message listener set up")}async handleMessage(e){"ANALYZE_PRODUCT"===e.type&&await this.handleProductAnalysis(e.payload)}async handleProductAnalysis(e){if(console.log("📦 Analyzing product:",e.product.id),!this.apiKey)return console.error("❌ No API key found"),void await this.showToast({message:"Please set your API key in the extension options",type:"error"});try{const t=performance.now(),a=await this.analyzeProduct(e),s=performance.now()-t;await this.sendToActiveTab({type:"ANALYSIS_COMPLETE",payload:{productId:e.product.id,analysis:{...a,timing:{...a.timing,total:s}}}})}catch(e){console.error("❌ Analysis failed:",e),await this.showToast({message:"Failed to analyze product",type:"error"})}}async sendToActiveTab(e){const t=await browser.tabs.query({active:!0,currentWindow:!0});t[0]?.id&&await browser.tabs.sendMessage(t[0].id,e)}async analyzeProduct(e){if(!this.apiKey)throw new Error("API key is required");const{product:t,preferences:a,searchTerm:s}=e;await this.sendToActiveTab({type:"ANALYSIS_STATUS",payload:{stage:"start",productId:t.id,data:{prompt:`Analyzing if product matches either:\n${s?`- Search term: "${s}"`:""}\n${a.length>0?`- Preferences: ${a.join(", ")}`:""}`}}});const i=performance.now(),o=[{role:"user",content:[{type:"text",text:`Analyze if this product matches either:\n${s?`- Search term: "${s}"`:""}\n${a.length>0?`- Preferences: ${a.join(", ")}`:""}\n\nProduct details:\nTitle: ${t.title}\nDescription: ${t.description}\n\nRespond in JSON format:\n{\n  "matches": boolean,\n  "confidence": number between 0 and 1,\n  "matchedCriteria": string[], // "search" or the specific preference that matched\n  "description": string explaining why it matched or didn't match\n}`},{type:"image",source:{type:"base64",media_type:"image/jpeg",data:""}}]}];let n,r;try{const{data:e,mediaType:a}=await async function(e){const t=await fetch(e),a=await t.blob(),s=a.type||"image/jpeg";return new Promise(((e,t)=>{const i=new FileReader;i.onloadend=()=>{const t=i.result.split(",")[1];e({data:t,mediaType:s})},i.onerror=t,i.readAsDataURL(a)}))}(t.imageUrl);o[0].content[1]={type:"image",source:{type:"base64",media_type:a,data:e}};const s={model:"claude-3-5-sonnet-20241022",max_tokens:1024,messages:o},c={"Content-Type":"application/json","anthropic-version":"2023-06-01","x-api-key":this.apiKey,"anthropic-dangerous-direct-browser-access":"true"};console.log("🔄 Claude API Request:",{url:"https://api.anthropic.com/v1/messages",method:"POST",headers:c,body:JSON.stringify(s,null,2)}),n=await fetch("https://api.anthropic.com/v1/messages",{method:"POST",headers:c,body:JSON.stringify(s)});const d=await n.text();if(console.log("🔄 Claude API Response:",{status:n.status,statusText:n.statusText,headers:Object.fromEntries(n.headers.entries()),body:d}),!n.ok){let e=`API request failed (${n.status})`;if(401===n.status||403===n.status)e="Invalid API key. Make sure you're using a valid API key from console.anthropic.com";else if(429===n.status)e="Rate limit exceeded. Please try again later.";else try{const t=JSON.parse(d);e+=`: ${t.error?.message||d}`}catch{e+=`: ${d}`}throw new Error(e)}r=JSON.parse(d);const p=performance.now()-i,l=r.content[0].text;await this.sendToActiveTab({type:"ANALYSIS_STATUS",payload:{stage:"complete",productId:t.id,data:{response:l,timing:{apiCall:p}}}});try{return{...JSON.parse(l),timing:{total:p,apiCall:p}}}catch(e){throw await this.sendToActiveTab({type:"ANALYSIS_STATUS",payload:{stage:"error",productId:t.id,data:{error:"Failed to parse Claude response"}}}),new Error("Invalid analysis response format")}}catch(e){throw await this.sendToActiveTab({type:"ANALYSIS_STATUS",payload:{stage:"error",productId:t.id,data:{error:e instanceof Error?e.message:"Unknown error"}}}),e}}async showToast(e){await this.sendToActiveTab({type:"SHOW_TOAST",payload:e})}}})();
//# sourceMappingURL=background.js.map