{"version":3,"file":"content.js","mappings":"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","sources":["webpack://vinted-lens/./src/content/index.ts"],"sourcesContent":["import {\n  Message,\n  Selectors,\n  ProductItem,\n  ExtensionState,\n  ProductAnalysis,\n  AnalysisCompletePayload,\n  UpdatePreferencesPayload,\n  UpdateSearchPayload,\n  ShowToastPayload,\n  StartScanPayload,\n  StopScanPayload,\n  ScanProgress,\n  ScanProgressPayload,\n  AnalysisStatusPayload,\n  AnalysisStage\n} from '../types';\n\nclass VintedLensContent {\n  private state: ExtensionState = {\n    isEnabled: true,\n    isScanning: false,\n    preferences: [],\n    currentSearch: null,\n    scanProgress: null\n  };\n\n  private scanQueue: ProductItem[] = [];\n  private currentProduct: ProductItem | null = null;\n\n  constructor() {\n    this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    console.log('üîç Vinted Lens: Initializing content script');\n\n    // Load initial state from storage\n    const storage = await browser.storage.local.get(['preferences', 'currentSearch']);\n    this.state.preferences = storage.preferences || [];\n    this.state.currentSearch = storage.currentSearch || null;\n    console.log('üìã Loaded preferences:', this.state.preferences);\n    console.log('üîé Current search:', this.state.currentSearch);\n\n    // Set up message listeners\n    browser.runtime.onMessage.addListener(this.handleMessage.bind(this));\n    console.log('üëÇ Message listener set up');\n  }\n\n  private handleMessage(message: Message): void {\n    switch (message.type) {\n      case 'START_SCAN':\n        this.handleStartScan(message.payload as StartScanPayload);\n        break;\n      case 'STOP_SCAN':\n        this.handleStopScan(message.payload as StopScanPayload);\n        break;\n      case 'ANALYSIS_COMPLETE':\n        this.handleAnalysisComplete(message.payload as AnalysisCompletePayload);\n        break;\n      case 'ANALYSIS_STATUS':\n        this.handleAnalysisStatus(message.payload as AnalysisStatusPayload);\n        break;\n      case 'UPDATE_PREFERENCES':\n        this.handlePreferencesUpdate(message.payload as UpdatePreferencesPayload);\n        break;\n      case 'UPDATE_SEARCH':\n        this.handleSearchUpdate(message.payload as UpdateSearchPayload);\n        break;\n      case 'SHOW_TOAST':\n        this.showToast(message.payload as ShowToastPayload);\n        break;\n    }\n  }\n\n  private handleAnalysisStatus(payload: AnalysisStatusPayload): void {\n    const { stage, productId, data } = payload;\n\n    switch (stage) {\n      case 'start':\n        console.log(`ü§ñ Analyzing product ${productId}:`, {\n          prompt: data?.prompt\n        });\n        break;\n\n      case 'complete':\n        console.log(`‚úÖ Claude response for ${productId}:`, {\n          response: data?.response,\n          timing: data?.timing\n        });\n        break;\n\n      case 'error':\n        console.error(`‚ùå Analysis failed for ${productId}:`, {\n          error: data?.error\n        });\n        break;\n    }\n  }\n\n  private handleStartScan(payload: StartScanPayload): void {\n    if (this.state.isScanning) {\n      console.log('‚è≥ Scan already in progress');\n      return;\n    }\n\n    // Update preferences and search term\n    this.state.preferences = payload.preferences;\n    this.state.currentSearch = payload.searchTerm;\n\n    // Get all unanalyzed products\n    this.scanQueue = this.getUnanalyzedProducts();\n\n    if (this.scanQueue.length === 0) {\n      this.showToast({\n        message: 'No items to analyze',\n        type: 'info'\n      });\n      return;\n    }\n\n    // Start scanning\n    this.state.isScanning = true;\n    this.state.scanProgress = {\n      total: this.scanQueue.length,\n      current: 0,\n      currentItem: null,\n      startTime: Date.now()\n    };\n\n    this.updateProgress();\n    this.processNextProduct();\n  }\n\n  private handleStopScan(payload: StopScanPayload): void {\n    if (!this.state.isScanning) return;\n\n    console.log('üõë Stopping scan:', payload.reason);\n    this.scanQueue = [];\n    this.currentProduct = null;\n    this.state.isScanning = false;\n    this.state.scanProgress = null;\n\n    this.showToast({\n      message: payload.reason === 'complete'\n        ? 'Scan complete'\n        : 'Scan stopped',\n      type: payload.reason === 'error' ? 'error' : 'info'\n    });\n\n    this.updateProgress();\n  }\n\n  private getUnanalyzedProducts(): ProductItem[] {\n    const items: ProductItem[] = [];\n    const productElements = document.querySelectorAll(\n      `${Selectors.ProductItem}:not(.vinted-lens-analyzed)`\n    );\n\n    productElements.forEach((element, index) => {\n      const imgElement = element.querySelector(Selectors.ProductImage) as HTMLImageElement;\n      const titleElement = element.querySelector(Selectors.ProductTitle);\n      const descElement = element.querySelector(Selectors.ProductDescription);\n\n      if (imgElement && titleElement && descElement) {\n        items.push({\n          id: `item-${Date.now()}-${index}`,\n          element: element as HTMLElement,\n          imageUrl: imgElement.src,\n          title: titleElement.textContent || '',\n          description: descElement.getAttribute('title') || ''\n        });\n      }\n    });\n\n    return items;\n  }\n\n  private async processNextProduct(): Promise<void> {\n    if (!this.state.isScanning) return;\n\n    // If we have a current product, wait for it to finish\n    if (this.currentProduct) {\n      console.log('‚è≥ Waiting for current product to finish:', this.currentProduct.id);\n      return;\n    }\n\n    this.currentProduct = this.scanQueue.shift() || null;\n    if (!this.currentProduct) {\n      this.handleStopScan({ reason: 'complete' });\n      return;\n    }\n\n    const product = this.currentProduct;\n    console.log('üîÑ Processing product:', product.id);\n\n    // Update progress\n    if (this.state.scanProgress) {\n      this.state.scanProgress.current++;\n      this.state.scanProgress.currentItem = product.title;\n      this.updateProgress();\n    }\n\n    // Add analyzing class\n    product.element.setAttribute('data-vinted-lens-id', product.id);\n    product.element.classList.add('vinted-lens-analyzing');\n\n    try {\n      // Send message to background script for analysis\n      console.log('üì§ Sending product for analysis:', {\n        id: product.id,\n        imageUrl: product.imageUrl,\n        title: product.title,\n        queueSize: this.scanQueue.length\n      });\n\n      await browser.runtime.sendMessage({\n        type: 'ANALYZE_PRODUCT',\n        payload: {\n          product: {\n            ...product,\n            element: undefined // Can't send DOM elements\n          },\n          preferences: this.state.preferences,\n          searchTerm: this.state.currentSearch\n        }\n      });\n    } catch (error) {\n      console.error('‚ùå Product analysis failed:', error);\n      this.showToast({\n        message: 'Failed to analyze product',\n        type: 'error'\n      });\n      product.element.classList.remove('vinted-lens-analyzing');\n      this.currentProduct = null;\n      // Try next product after a short delay\n      setTimeout(() => this.processNextProduct(), 1000);\n    }\n  }\n\n  private handleAnalysisComplete(payload: AnalysisCompletePayload): void {\n    const { productId, analysis } = payload;\n    console.log('üì• Analysis complete:', {\n      productId,\n      matches: analysis.matches,\n      confidence: analysis.confidence,\n      timing: analysis.timing,\n      queueSize: this.scanQueue.length\n    });\n\n    // Find the product element\n    const productElement = document.querySelector(\n      `${Selectors.ProductItem}[data-vinted-lens-id=\"${productId}\"]`\n    ) as HTMLElement;\n\n    if (!productElement) {\n      console.warn('‚ö†Ô∏è No element found for product:', productId);\n      this.currentProduct = null;\n      setTimeout(() => this.processNextProduct(), 1000);\n      return;\n    }\n\n    // Remove analyzing state\n    productElement.classList.remove('vinted-lens-analyzing');\n    productElement.classList.add('vinted-lens-analyzed');\n\n    // Apply transition class first\n    productElement.classList.add('vinted-lens-transition');\n\n    // Use setTimeout to ensure transition is applied\n    setTimeout(() => {\n      if (analysis.matches) {\n        productElement.classList.add('vinted-lens-match');\n        if (analysis.confidence < 0.8) {\n          productElement.classList.add('vinted-lens-low-confidence');\n        }\n      } else {\n        productElement.classList.add('vinted-lens-hidden');\n      }\n\n      // Clear current product and process next after a short delay\n      this.currentProduct = null;\n      setTimeout(() => this.processNextProduct(), 500);\n    }, 0);\n  }\n\n  private updateProgress(): void {\n    if (!this.state.scanProgress) return;\n\n    // Send progress update\n    browser.runtime.sendMessage({\n      type: 'SCAN_PROGRESS',\n      payload: {\n        progress: this.state.scanProgress\n      } as ScanProgressPayload\n    });\n  }\n\n  private handlePreferencesUpdate(payload: UpdatePreferencesPayload): void {\n    this.state.preferences = payload.preferences;\n    this.resetAnalysis();\n  }\n\n  private handleSearchUpdate(payload: UpdateSearchPayload): void {\n    this.state.currentSearch = payload.search;\n    this.resetAnalysis();\n  }\n\n  private resetAnalysis(): void {\n    // Stop any ongoing scan\n    if (this.state.isScanning) {\n      this.handleStopScan({ reason: 'user' });\n    }\n\n    // Clear analysis classes\n    document.querySelectorAll('.vinted-lens-match, .vinted-lens-hidden, .vinted-lens-low-confidence, .vinted-lens-analyzed')\n      .forEach(element => {\n        element.classList.remove(\n          'vinted-lens-match',\n          'vinted-lens-hidden',\n          'vinted-lens-low-confidence',\n          'vinted-lens-analyzed'\n        );\n        element.removeAttribute('data-vinted-lens-id');\n      });\n  }\n\n  private showToast(options: ShowToastPayload): void {\n    const toast = document.createElement('div');\n    toast.className = `vinted-lens-toast ${options.type || ''}`;\n    toast.textContent = options.message;\n    document.body.appendChild(toast);\n\n    // Force reflow to trigger animation\n    toast.offsetHeight;\n    toast.classList.add('show');\n\n    setTimeout(() => {\n      toast.classList.remove('show');\n      setTimeout(() => toast.remove(), 300);\n    }, options.duration || 3000);\n  }\n}\n\n// Initialize content script\nnew VintedLensContent();\n"],"names":["constructor","state","isEnabled","isScanning","preferences","currentSearch","scanProgress","scanQueue","currentProduct","this","initialize","console","log","storage","browser","local","get","runtime","onMessage","addListener","handleMessage","bind","message","type","handleStartScan","payload","handleStopScan","handleAnalysisComplete","handleAnalysisStatus","handlePreferencesUpdate","handleSearchUpdate","showToast","stage","productId","data","prompt","response","timing","error","searchTerm","getUnanalyzedProducts","length","total","current","currentItem","startTime","Date","now","updateProgress","processNextProduct","reason","items","document","querySelectorAll","forEach","element","index","imgElement","querySelector","titleElement","descElement","push","id","imageUrl","src","title","textContent","description","getAttribute","shift","product","setAttribute","classList","add","queueSize","sendMessage","undefined","remove","setTimeout","analysis","matches","confidence","productElement","warn","progress","resetAnalysis","search","removeAttribute","options","toast","createElement","className","body","appendChild","offsetHeight","duration"],"sourceRoot":""}