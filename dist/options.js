(()=>{"use strict";class e{constructor(){this.apiKeyInput=document.getElementById("apiKey"),this.defaultPreferencesInput=document.getElementById("defaultPreferences"),this.saveButton=document.getElementById("save"),this.statusElement=document.getElementById("status"),this.initialize()}async initialize(){const e=await async function(){const e=await browser.storage.local.get(["preferences","apiKey"]);return{defaultPreferences:e.preferences||[],apiKey:e.apiKey||""}}();this.apiKeyInput.value=e.apiKey||"",this.defaultPreferencesInput.value=(e.defaultPreferences||[]).join(", "),this.setupEventListeners()}setupEventListeners(){this.saveButton.addEventListener("click",(()=>{this.saveSettings()})),this.apiKeyInput.addEventListener("keypress",(e=>{"Enter"===e.key&&this.saveSettings()})),this.defaultPreferencesInput.addEventListener("keypress",(e=>{"Enter"===e.key&&this.saveSettings()}))}async saveSettings(){const e=this.apiKeyInput.value.trim(),t=this.defaultPreferencesInput.value.split(",").map((e=>e.trim())).filter((e=>e.length>0));try{if(!this.validateApiKey(e))throw new Error("Invalid API key format");await async function(e){await browser.storage.local.set({preferences:e.defaultPreferences,apiKey:e.apiKey})}({apiKey:e,defaultPreferences:t}),this.showStatus("Settings saved successfully","success")}catch(e){this.showStatus(e instanceof Error?e.message:"Failed to save settings","error")}}validateApiKey(e){return e.startsWith("sk-ant-")&&e.length>=32}showStatus(e,t){this.statusElement.textContent=e,this.statusElement.className=`status ${t}`,"success"===t&&setTimeout((()=>{this.statusElement.className="status",this.statusElement.textContent=""}),3e3)}}document.addEventListener("DOMContentLoaded",(()=>{new e}))})();
//# sourceMappingURL=options.js.map